{
    "sourceFile": "src/main/session/sessionManager.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 23,
            "patches": [
                {
                    "date": 1682595402122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1682595416203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n-import { ISession } from './session'\r\n-\r\n-export class SessionManager {\r\n-  sessions: ISession[]\r\n-  active: number\r\n-  constructor() {\r\n-    this.sessions = []\r\n-  }\r\n-}\r\n+import { ISession } from './session'\n+\n+export class SessionManager {\n+  sessions: ISession[]\n+  active: number\n+  constructor() {\n+    this.sessions = []\n+    this.active = 0\n+  }\n+}\n"
                },
                {
                    "date": 1682595538892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,13 @@\n-import { ISession } from './session'\n+import { SESSION_TYPE, ISession } from './session'\n \n export class SessionManager {\n   sessions: ISession[]\n   active: number\n   constructor() {\n     this.sessions = []\n     this.active = 0\n   }\n+  createSession() {\n+    new ISession('', SESSION_TYPE.)\n+  }\n }\n"
                },
                {
                    "date": 1682595666987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,7 +7,7 @@\n     this.sessions = []\n     this.active = 0\n   }\n   createSession() {\n-    new ISession('', SESSION_TYPE.)\n+    new ISession('', )\n   }\n }\n"
                },
                {
                    "date": 1682595743122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { SESSION_TYPE, ISession } from './session'\n+import { sessionTypes, ISession } from './session'\n \n export class SessionManager {\n   sessions: ISession[]\n   active: number\n@@ -7,7 +7,7 @@\n     this.sessions = []\n     this.active = 0\n   }\n   createSession() {\n-    new ISession('', )\n+    new ISession('', sessionTypes.ftp)\n   }\n }\n"
                },
                {
                    "date": 1682596143210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,14 @@\n import { sessionTypes, ISession } from './session'\n \n export class SessionManager {\n-  sessions: ISession[]\n+  sessions: Map<string, ISession>\n   active: number\n   constructor() {\n-    this.sessions = []\n+    this.sessions = new Map<string, ISession>()\n     this.active = 0\n   }\n   createSession() {\n-    new ISession('', sessionTypes.ftp)\n+    const instance = new ISession('', sessionTypes.ftp)\n+    this.sessions.set(instance.getSessionId, instance)\n   }\n }\n"
                },
                {
                    "date": 1682596164872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,7 +8,7 @@\n     this.active = 0\n   }\n   createSession() {\n     const instance = new ISession('', sessionTypes.ftp)\n-    this.sessions.set(instance.getSessionId, instance)\n+    this.sessions.set(instance.getSessionId(), instance)\n   }\n }\n"
                },
                {
                    "date": 1682596188019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,5 +10,9 @@\n   createSession() {\n     const instance = new ISession('', sessionTypes.ftp)\n     this.sessions.set(instance.getSessionId(), instance)\n   }\n+\n+  getSession(id: string) {\n+    this.sessions.get(id)\n+  }\n }\n"
                },
                {
                    "date": 1682596194179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,7 +12,7 @@\n     this.sessions.set(instance.getSessionId(), instance)\n   }\n \n   getSession(id: string) {\n-    this.sessions.get(id)\n+    return this.sessions.get(id)\n   }\n }\n"
                },
                {
                    "date": 1682596217491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,5 +14,9 @@\n \n   getSession(id: string) {\n     return this.sessions.get(id)\n   }\n+\n+  remove(id: string) {\n+    this.sessions.delete(id)\n+  }\n }\n"
                },
                {
                    "date": 1682596327334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,7 +16,14 @@\n     return this.sessions.get(id)\n   }\n \n   remove(id: string) {\n+    // 获取会话实例\n+    const instance = this.sessions.get(id)\n+    // 销毁实例\n+    instance?.dispose()\n+    // 从会话列表中移除\n     this.sessions.delete(id)\n   }\n+\n+  clearAll() {}\n }\n"
                },
                {
                    "date": 1682596390159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,14 +16,18 @@\n     return this.sessions.get(id)\n   }\n \n   remove(id: string) {\n-    // 获取会话实例\n-    const instance = this.sessions.get(id)\n-    // 销毁实例\n-    instance?.dispose()\n-    // 从会话列表中移除\n-    this.sessions.delete(id)\n+    try {\n+      // 获取会话实例\n+      const instance = this.sessions.get(id)\n+      // 销毁实例\n+      instance?.dispose()\n+      // 从会话列表中移除\n+      this.sessions.delete(id)\n+    } catch (error) {\n+      console.error('session dispose fail', error)\n+    }\n   }\n \n   clearAll() {}\n }\n"
                },
                {
                    "date": 1682596579194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,6 +28,9 @@\n       console.error('session dispose fail', error)\n     }\n   }\n \n-  clearAll() {}\n+  clearAll() {\n+    const keys = [...this.sessions.keys()]\n+    keys.forEach((x) => this.remove(x))\n+  }\n }\n"
                },
                {
                    "date": 1682596918138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,14 @@\n-import { sessionTypes, ISession } from './session'\n+import { sessionTypes, ISession, ISessionOptions } from './session'\n \n export class SessionManager {\n   sessions: Map<string, ISession>\n   active: number\n   constructor() {\n     this.sessions = new Map<string, ISession>()\n     this.active = 0\n   }\n-  createSession() {\n+  createSession(options: ISessionOptions) {\n     const instance = new ISession('', sessionTypes.ftp)\n     this.sessions.set(instance.getSessionId(), instance)\n   }\n \n"
                },
                {
                    "date": 1682597155338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,19 @@\n-import { sessionTypes, ISession, ISessionOptions } from './session'\n+import { sessionTypes, ISession, ISessionOptions, SESSION_TYPE } from './service/session'\n \n export class SessionManager {\n   sessions: Map<string, ISession>\n   active: number\n   constructor() {\n     this.sessions = new Map<string, ISession>()\n     this.active = 0\n   }\n-  createSession(options: ISessionOptions) {\n-    const instance = new ISession('', sessionTypes.ftp)\n+  createSession(type: SESSION_TYPE, options: ISessionOptions) {\n+    switch (type) {\n+      case 'ssh':\n+\n+      default:\n+    }\n     this.sessions.set(instance.getSessionId(), instance)\n   }\n \n   getSession(id: string) {\n"
                },
                {
                    "date": 1682597559461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import { sessionTypes, ISession, ISessionOptions, SESSION_TYPE } from './service/session'\n+import { SshSession, SshOptions } from './service/impl/sshSession'\n \n export class SessionManager {\n   sessions: Map<string, ISession>\n   active: number\n"
                },
                {
                    "date": 1682597677563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,10 @@\n   }\n   createSession(type: SESSION_TYPE, options: ISessionOptions) {\n     switch (type) {\n       case 'ssh':\n-\n+        const instance = new SshSession(options)\n+        this.sessions.set(instance.getSessionId(), instance)\n       default:\n     }\n     this.sessions.set(instance.getSessionId(), instance)\n   }\n"
                },
                {
                    "date": 1682597683527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n     switch (type) {\n       case 'ssh':\n         const instance = new SshSession(options)\n         this.sessions.set(instance.getSessionId(), instance)\n+        break\n       default:\n     }\n     this.sessions.set(instance.getSessionId(), instance)\n   }\n"
                },
                {
                    "date": 1682597794495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,16 +8,17 @@\n     this.sessions = new Map<string, ISession>()\n     this.active = 0\n   }\n   createSession(type: SESSION_TYPE, options: ISessionOptions) {\n+    let session: ISession = null\n     switch (type) {\n       case 'ssh':\n-        const instance = new SshSession(options)\n+        session = new SshSession(options)\n         this.sessions.set(instance.getSessionId(), instance)\n         break\n       default:\n     }\n-    this.sessions.set(instance.getSessionId(), instance)\n+    session && this.sessions.set(session.getSessionId(), session)\n   }\n \n   getSession(id: string) {\n     return this.sessions.get(id)\n"
                },
                {
                    "date": 1682597806513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n-import { sessionTypes, ISession, ISessionOptions, SESSION_TYPE } from './service/session'\n-import { SshSession, SshOptions } from './service/impl/sshSession'\n+import { SshSession } from './service/impl/sshSession'\n+import { ISession, ISessionOptions, SESSION_TYPE } from './service/session'\n \n export class SessionManager {\n   sessions: Map<string, ISession>\n   active: number\n"
                },
                {
                    "date": 1682597816298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n     this.sessions = new Map<string, ISession>()\n     this.active = 0\n   }\n   createSession(type: SESSION_TYPE, options: ISessionOptions) {\n-    let session: ISession = null\n+    let session: ISession | null = null\n     switch (type) {\n       case 'ssh':\n         session = new SshSession(options)\n         this.sessions.set(instance.getSessionId(), instance)\n"
                },
                {
                    "date": 1682597823420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,8 @@\n     let session: ISession | null = null\n     switch (type) {\n       case 'ssh':\n         session = new SshSession(options)\n-        this.sessions.set(instance.getSessionId(), instance)\n         break\n       default:\n     }\n     session && this.sessions.set(session.getSessionId(), session)\n"
                },
                {
                    "date": 1682597874236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,12 @@\n     switch (type) {\n       case 'ssh':\n         session = new SshSession(options)\n         break\n+      case 'telnet':\n+      case 'vnc':\n+      case 'ftp':\n+      case 'sftp':\n       default:\n     }\n     session && this.sessions.set(session.getSessionId(), session)\n   }\n"
                },
                {
                    "date": 1682597881700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,11 @@\n       case 'telnet':\n       case 'vnc':\n       case 'ftp':\n       case 'sftp':\n+      case 'webdav':\n+      case 'serial':\n+      case 'shell':\n       default:\n     }\n     session && this.sessions.set(session.getSessionId(), session)\n   }\n"
                }
            ],
            "date": 1682595402122,
            "name": "Commit-0",
            "content": "import { ISession } from './session'\r\n\r\nexport class SessionManager {\r\n  sessions: ISession[]\r\n  active: number\r\n  constructor() {\r\n    this.sessions = []\r\n  }\r\n}\r\n"
        }
    ]
}